/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * test_add_student_client.cc
 * 2024-01-10 22:43:21
 * Generated by rpc framework rpc_generator.py
****************************************************/

#include <google/protobuf/service.h>
#include <rpc/net/rpc/rpc_channel.h>
#include <rpc/net/rpc/rpc_controller.h>
#include <rpc/net/rpc/rpc_closure.h>
#include <rpc/common/log.h>
#include <stdio.h>
#include "student_server/pb/student_server.pb.h"


void test_client(const std::string& addr) {

  NEWMESSAGE(::addSyudentRequest, request);
  NEWMESSAGE(::addSyudentResponse, response);

  // request->set_xxx(100);

  NEWRPCCONTROLLER(controller);
  controller->SetTimeout(2000);

  std::shared_ptr<rpc::RpcClosure> closure = std::make_shared<rpc::RpcClosure>(nullptr, [request, response, controller]() mutable {
    if (controller->GetErrorCode() == 0) {
      INFOLOG("call rpc success, request[%s], response[%s]", request->ShortDebugString().c_str(), response->ShortDebugString().c_str());
      
    } else {
      ERRORLOG("call rpc failed, request[%s], error code[%d], error info[%s]", 
        request->ShortDebugString().c_str(), 
        controller->GetErrorCode(), 
        controller->GetErrorInfo().c_str());
    }

    exit(0);
  });

  CALLRPRC(addr, Order_Stub, add_student, controller, request, response, closure);

} 

int main(int argc, char* argv[]) {

  if (argc != 3) {
    printf ("param error, Usage: ./client ip port\n");
    printf ("For example: ./client 127.0.0.1 12345\n");
    return -1;
  }

  rpc::Config::SetGlobalConfig(NULL);

  rpc::Logger::InitGlobalLogger(0);

  std::string addr = std::string(argv[1]) + ":" + std::string(argv[2]);  

  test_client(addr);

  return 0;
}
