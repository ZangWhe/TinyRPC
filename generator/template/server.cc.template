/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * ${FILE_NAME}
 * ${CREATE_TIME}
 * Generated by rpc framework rpc_generator.py
 * Do not edit !!!
****************************************************/


#include <google/protobuf/service.h>
#include <exception>
#include <rpc/common/log.h>
${INCLUDE_PB_HEADER}
${INCLUDE_SERVER_HEADER}
${INCLUDE_BUSINESS_EXCEPTION_HEADER}
${INCLUDE_SERVICE}

#define CALL_RPC_INTERFACE(Type)                                                                                                    \
  {                                                                                                                                 \
    rpc::RpcClosure* clo = dynamic_cast<rpc::RpcClosure*>(done);                                                              \
    rpc::RpcController* con = dynamic_cast<rpc::RpcController*>(controller);                                                  \
    std::shared_ptr<Type> impl = std::make_shared<Type>(request, response, clo, con);                                               \
    rpc::RunTime::GetRunTime()->m_rpc_interface = std::dynamic_pointer_cast<rpc::RpcInterface>(impl).get();                   \
    response->set_ret_code(0);                                                                                                      \
    response->set_res_info("OK");                                                                                                   \
    try {                                                                                                                           \
      impl->run();                                                                                                                  \
    } catch (BusinessException& e) {                                                                                                \
      APPDEBUGLOG("business exception");                                                                                            \
      response->set_ret_code(e.errorCode());                                                                                        \
      response->set_res_info(e.errorInfo());                                                                                        \
    } catch (rpc::RpcException& e) {                                                                                          \
      APPDEBUGLOG("RpcException");                                                                                               \
      response->set_ret_code(-1);                                                                                                   \
      response->set_res_info("Unknown RpcException");                                                                            \
    } catch (std::exception& e) {                                                                                                   \
      APPDEBUGLOG("std::exception");                                                                                                \
      response->set_ret_code(-1);                                                                                                   \
      response->set_res_info("Unknown std::exception");                                                                             \
    } catch (...) {                                                                                                                 \
      APPDEBUGLOG("... exception");                                                                                                 \
      response->set_ret_code(-1);                                                                                                   \
      response->set_res_info("Unknown exception");                                                                                  \
    }                                                                                                                               \
  }                                                                                                                                 \

namespace ${PROJECT_NAME} {

${METHOD}

}